#Example:
#
#[classname]
#BASECLASS = parentclass
#attr1 = int
#attr2 = Type2$R
#attr3 = Type3$C
#
#will be translated into:
#
#class classname : public parentclass {
#  public:
#    void attr1Is(const int value) { attr1_ = value; }
#    int attr1() const { return attr1_; }
#
#    // no mutator function because an R after the $ denotes that the attribute is readonly
#    Type2 attr2() const { return attr2_; }
#
#    // a C after the $ denotes that the attribute is a collection, a 's' will be appended to the attribute name
#    void attr3Is(const Type3 value) { attr3s_.push_back(value); }
#    Type3 attr3 const (const int index) { return attr3s_.at(index); }
#
#  private:
#    int attr1_;
#    Type2 attr2_;
#    std::vector<Type3> attr3s_;
#};
#
#You can combine multiple modifiers after the '$' separator, e.g. $RC gives a readonly collection

[HEADER]
content: #ifndef ENGINE_H
 #define ENGINE_H
 \n
 #include <iostream>
 #include <string>
 #include <vector>
 #include <list>
 #include <exception>
 \n
 using namespace std;
 #include "Ptr.h"
 #include "PtrInterface.h"
 #include "Instance.h"
 #include "Nominal.h"
 #include "types.h"
 \n
 namespace Shipping {

[Location]
BASECLASS = Fwk::PtrInterface<Location>
segment = Ptr<Segment>$C
name = string$R

[Customer]
BASECLASS = Location

[Port]
BASECLASS = Location

[Terminal]
BASECLASS = Location
transportationMode = TransportationMode$R

[Segment]
BASECLASS = Fwk::PtrInterface<Segment>
ENUM = TransportationMode truck boat plane
transportationMode = TransportationMode$R
source = Ptr<Location>
length = Mile
returnSegment = Ptr<Segment>
difficulty = SegmentDifficultyUnit
expediteSupport = bool

[Fleet]
transportationMode = TransportationMode
speed = Mile
capacity = PackageUnit
cost = USD

[FOOTER]
content: } /* end namespace */
 \n
 #endif

